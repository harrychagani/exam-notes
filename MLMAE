import numpy as np
from sklearn.metrics import mean_absolute_error
# Data
X = np.array([26, 51, 28, 1, 67])
y = np.array([13, 8, 10, 0, 7])
split = 59.0
# Split groups
left_mask = X <= split
right_mask = X > split
# Get y values for each group
y_left = y[left_mask]
y_right = y[right_mask]
# Compute MAE for each group using their respective group mean
mae_left = mean_absolute_error(y_left, [np.mean(y_left)] * len(y_left))
mae_right = mean_absolute_error(y_right, [np.mean(y_right)] * len(y_right))
# Compute total MAE (weighted by number of samples in each group)
total_mae = (len(y_left) * mae_left + len(y_right) * mae_right) / len(y)
print("Mean Absolute Error after split:", round(total_mae, 4))

import numpy as np
from sklearn.metrics import mean_absolute_error
# Data
X = np.array([26, 51, 28, 1, 67])
y = np.array([13, 8, 10, 0, 7])
# Compute MAE using overall mean
overall_mean = np.mean(y)
mae = mean_absolute_error(y, [overall_mean] * len(y))
print("Mean Absolute Error:", round(mae, 4))
